package github.znzsofficial.utils;

import android.app.ProgressDialog;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.util.Log;
import android.webkit.MimeTypeMap;

import androidx.annotation.NonNull;
import androidx.core.content.FileProvider;

import com.androlua.LuaActivity;
import com.androlua.LuaUtil;

import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import org.luaj.Globals;
import org.luaj.LuaClosure;
import org.luaj.LuaError;
import org.luaj.LuaTable;
import org.luaj.LuaValue;
import org.luaj.android.file;
import org.luaj.compiler.DumpState;
import org.luaj.lib.jse.JsePlatform;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

public class LuaBuildUtil {
  private LuaActivity lua;
  private ProgressDialog mDlg;
  private Globals mGlobals = JsePlatform.standardGlobals();

  public LuaBuildUtil(@NonNull LuaActivity luaActivity) {
    this.lua = luaActivity;
  }

  public void startBin(String str, String mRootDir) {
    try {
      bin(str, mRootDir);
    } catch (Exception e) {
      e.printStackTrace();
      new MaterialAlertDialogBuilder(lua)
          .setTitle("Error")
          .setMessage(e.toString())
          .setPositiveButton(android.R.string.ok, null)
          .create()
          .show();
    }
  }

  public static String toString(Class<?>[] a) {
    if (a == null) return "null";

    int iMax = a.length - 1;
    if (iMax == -1) return "()";

    StringBuilder b = new StringBuilder();
    b.append('(');
    for (int i = 0; ; i++) {
      b.append(a[i].getSimpleName());
      if (i == iMax) return b.append(')').toString();
      b.append(", ");
    }
  }

  public void bin(String mProjDir, String mRootDir) {
    LuaTable env = new LuaTable();
    mGlobals.loadfile(new File(mProjDir, "init.lua").getAbsolutePath(), env).call();
    String appName = "demo";
    String verName = "1.0";
    String verCode = "1";
    String pkgName = "org.luaj.demo";
    LuaValue value = env.get("appname");
    if (!value.isstring()) value = env.get("app_name");
    if (value.isstring()) appName = value.tojstring();

    value = env.get("appver");
    if (!value.isstring()) value = env.get("app_ver");
    if (!value.isstring()) value = env.get("ver_name");
    if (value.isstring()) verName = value.tojstring();

    value = env.get("appcode");
    if (!value.isstring()) value = env.get("app_code");
    if (!value.isstring()) value = env.get("ver_code");
    if (value.isstring()) verCode = value.tojstring();

    value = env.get("packagename");
    if (!value.isstring()) value = env.get("package_name");
    if (value.isstring()) pkgName = value.tojstring();

    String[] ps = new String[0];
    value = env.get("permissions");
    if (!value.istable()) value = env.get("user_permission");
    if (value.istable()) {
      LuaTable tb = value.checktable();
      int len = tb.length();
      ps = new String[len];
      for (int i = 0; i < len; i++) {
        String p = tb.get(i + 1).tojstring();
        if (!p.contains(".")) p = "android.permission." + p;
        ps[i] = p;
      }
    }

    String fappName = appName;
    String fpkgName = pkgName;
    String fverName = verName;
    final String[] finalPs = ps;
    String finalVerCode = verCode;
    mDlg = new ProgressDialog(lua);
    mDlg.setMessage("正在打包...");
    mDlg.show();
    new Thread(
            () -> {
              bin(
                  fappName,
                  fpkgName,
                  fverName,
                  finalVerCode,
                  finalPs,
                  mRootDir,
                  new File(mProjDir));
            })
        .start();
  }

  private String getType(File file) {
    int lastDot = file.getName().lastIndexOf(46);
    if (lastDot >= 0) {
      String extension = file.getName().substring(lastDot + 1);
      String mime = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
      if (mime != null) {
        return mime;
      }
    }
    return "application/octet-stream";
  }

  public Uri getUriForFile(File path) {
    return FileProvider.getUriForFile(lua, lua.getPackageName(), path);
  }

  public void bin(
      String aname,
      String pkg,
      String ver,
      String code,
      String[] ps,
      String mRootDir,
      File mProjDir) {
    File bf = new File(mRootDir, "bin");
    bf.mkdirs();
    File op = new File(bf, mProjDir.getName());
    Log.i("luaj", "bin: " + op);
    CharSequence lb = lua.getApplicationInfo().nonLocalizedLabel;
    String apkg = lua.getPackageName();
    String vr = "1.0";
    try {
      vr = lua.getPackageManager().getPackageInfo(lua.getPackageName(), 0).versionName;
    } catch (PackageManager.NameNotFoundException e) {
      e.printStackTrace();
    }
    try {
      ZipOutputStream zip = new ZipOutputStream(new FileOutputStream(op));
      File[] fs = mProjDir.listFiles();
      for (File f : fs) {
        addZip(zip, f, "assets");
      }
      // ZipInputStream zin = new ZipInputStream(new FileInputStream(getPackageCodePath()));
      ZipFile zf = new ZipFile(lua.getPackageCodePath());
      Enumeration<? extends ZipEntry> es = zf.entries();
      while (es.hasMoreElements()) {
        ZipEntry z = es.nextElement();
        if (z.getName().startsWith("assets")) continue;
        zip.putNextEntry(new ZipEntry(z.getName()));
        // if (z.getName().equals("AndroidManifest.xml")) {}
        if (mDlg != null) {
          lua.runOnUiThread(
              () -> {
                mDlg.setMessage(z.getName());
              });
          if (z.getName().endsWith("icon.png") && new File(mProjDir, "icon.png").exists())
            LuaUtil.copyFile(new FileInputStream(new File(mProjDir, "icon.png")), zip);
          else LuaUtil.copyFile(zf.getInputStream(z), zip);
        }
      }
      zf.close();
      zip.closeEntry();
      zip.close();
      File ap = new File(op.getAbsolutePath() + ".apk");
      if (mDlg != null) {
        lua.runOnUiThread(
            () -> {
              mDlg.setMessage("正在改名...");
            });
      }
      op.renameTo(ap);
      if (mDlg != null) {
        lua.runOnUiThread(
            () -> {
              mDlg.dismiss();
              mDlg = null;
            });
      }
      Log.i("luaj", "bin: finish " + op);
    } catch (Exception e) {
      lua.runOnUiThread(
          () -> {
            mDlg.dismiss();
            mDlg = null;
            new MaterialAlertDialogBuilder(lua)
                .setTitle("Error")
                .setMessage(e.getMessage())
                .setPositiveButton(android.R.string.ok, null)
                .create()
                .show();
          });
      e.printStackTrace();
    }
  }

  private void addZip(ZipOutputStream zip, File dir, String root) {
    Log.i("luaj", "addZip: " + root + ";" + dir);
    if (dir.getName().startsWith(".")) return;
    if (mDlg != null) {
      lua.runOnUiThread(
          () -> {
            mDlg.setMessage(dir.getName());
          });
    }
    String name = root + "/" + dir.getName();
    if (name.endsWith(".apk")) return;
    if (dir.isDirectory()) {
      File[] fs = dir.listFiles();
      for (File f : fs) {
        addZip(zip, f, name);
      }
    } else {
      try {
        zip.putNextEntry(new ZipEntry(name));
      } catch (Exception e) {
        throw new LuaError(e);
      }
      if (name.endsWith(".lua")) {
        LuaValue args = mGlobals.loadfile(dir.getAbsolutePath());
        LuaValue f = args.checkfunction(1);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
          DumpState.dump(((LuaClosure) f).c, baos, true);
          zip.write(baos.toByteArray());
          zip.flush();
        } catch (Exception e) {
          throw new LuaError(e);
        }
      } else {
        try {
          /*byte[] b = LuaUtil.readAll(dir.getAbsolutePath());
          zip.write(b, 0, b.length);
          zip.flush();*/
          FileInputStream in = new FileInputStream(dir);
          LuaUtil.copyFile(in, zip);
          in.close();
        } catch (Exception e) {
          throw new LuaError(e);
        }
      }
    }
  }
}
