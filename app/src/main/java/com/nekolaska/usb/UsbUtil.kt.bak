package com.nekolaska.usb

import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.ServiceConnection
import android.hardware.usb.UsbDevice
import android.hardware.usb.UsbManager
import android.os.IBinder
import com.nekolaska.ktx.toLuaValue
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import me.jahnen.libaums.core.UsbMassStorageDevice
import me.jahnen.libaums.core.UsbMassStorageDevice.Companion.getMassStorageDevices
import me.jahnen.libaums.core.fs.FileSystem
import me.jahnen.libaums.core.fs.UsbFile
import me.jahnen.libaums.core.fs.UsbFileStreamFactory
import me.jahnen.libaums.server.http.UsbFileHttpServer
import me.jahnen.libaums.server.http.UsbFileHttpServerService
import me.jahnen.libaums.server.http.server.NanoHttpdServer
import org.luaj.LuaFunction
import java.io.BufferedInputStream
import java.io.BufferedOutputStream
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.net.InetAddress

class UFile(val file: UsbFile, private val fs: FileSystem) : UsbFile by file {
    private var fileServer: UsbFileHttpServer? = null
    override val parent: UFile?
        get() {
            val parent = file.parent
            return if (parent == null) null
            else UFile(parent, fs)
        }

    fun getChunkSize() = fs.chunkSize
    fun getFreeSpace() = fs.freeSpace
    fun getOccupiedSpace() = fs.occupiedSpace
    fun getCapacity() = fs.capacity

    fun rename(newName: String) {
        if (name == newName) return
        if (isDirectory) return
        if (parent == null) return
        parent!!.createFile(newName)
        bufferedInputStream.use { inputStream ->
            bufferedOutputStream.use { outputStream ->
                inputStream!!.copyTo(outputStream!!)
            }
        }
    }

    fun startServer() {
        val server = NanoHttpdServer(8000)
        fileServer = UsbFileHttpServer(file, server)
        fileServer!!.start()
    }

    fun stopServer() {
        fileServer?.stop()
    }

    fun moveTo(destination: UFile) {
        file.moveTo(destination.file)
    }

    override fun createFile(name: String): UFile {
        return UFile(file.createFile(name), fs)
    }

    fun createDir(name: String): UFile {
        return UFile(file.createDirectory(name), fs)
    }

    fun getUrl(): String {
        return "http://${InetAddress.getLocalHost().hostAddress}:8000${file.absolutePath}"
    }

    override fun toString(): String {
        return "UFile: $file"
    }

    override fun search(path: String): UFile? {
        val result = file.search(path)
        return if (result != null) UFile(result, fs)
        else null
    }

    fun getOrCreateDir(path: String): UFile {
        return search(path) ?: createDir(path)
    }

    fun getOrCreateFile(path: String): UFile {
        return search(path) ?: createFile(path)
    }

    fun exists(): Boolean {
        if (parent == null) return true
        return parent!!.search(name) != null
    }

    fun getPath(): String {
        return file.absolutePath
    }

    fun copyToSdcard(path: String): Boolean {
        val `in` = bufferedInputStream ?: return false
        FileOutputStream(path).use { outputStream ->
            `in`.use { inputStream ->
                inputStream.copyTo(outputStream)
            }
        }
        return true
    }

    fun copyToSdcard(path: String, callback: LuaFunction) {
        GlobalScope.launch(Dispatchers.IO) {
            val `in` = bufferedInputStream ?: run {
                withContext(Dispatchers.Main) {
                    callback.call(false.toLuaValue(), path.toLuaValue(), 0.toLuaValue())
                }
                return@launch
            }

            try {
                FileOutputStream(path).use { outputStream ->
                    `in`.use { inputStream ->
                        val buffer = ByteArray(8192)
                        var bytesRead: Int
                        var totalBytesRead: Long = 0
                        val fileSize = length

                        while (inputStream.read(buffer).also { bytesRead = it } != -1) {
                            outputStream.write(buffer, 0, bytesRead)
                            totalBytesRead += bytesRead.toLong()
                            val progress =
                                ((totalBytesRead.toDouble() / fileSize.toDouble()) * 100).toInt()
                            withContext(Dispatchers.Main) {
                                callback.call(null, null, progress.toLuaValue())
                            }
                        }
                    }
                }
                withContext(Dispatchers.Main) {
                    callback.call(true.toLuaValue(), path.toLuaValue(), 100.toLuaValue())
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    callback.call(false.toLuaValue(), path.toLuaValue(), 0.toLuaValue())
                }
            }
        }
    }

    fun copyFromSdcard(path: String, callback: LuaFunction) {
        GlobalScope.launch(Dispatchers.IO) {
            if (!isDirectory) {
                withContext(Dispatchers.Main) {
                    callback.call(false.toLuaValue(), path.toLuaValue(), 0.toLuaValue())
                }
                return@launch
            }
            val ioFile = File(path)
            val uFile = createFile(ioFile.name)

            try {
                uFile.bufferedOutputStream!!.use { outputStream ->
                    ioFile.inputStream().use { inputStream ->
                        val buffer = ByteArray(8192)
                        var bytesRead: Int
                        var totalBytesRead: Long = 0
                        val fileSize = uFile.length

                        while (inputStream.read(buffer).also { bytesRead = it } != -1) {
                            outputStream.write(buffer, 0, bytesRead)
                            totalBytesRead += bytesRead.toLong()
                            val progress =
                                ((totalBytesRead.toDouble() / fileSize.toDouble()) * 100).toInt()
                            withContext(Dispatchers.Main) {
                                callback.call(null, null, progress.toLuaValue())
                            }
                        }
                    }
                }
                withContext(Dispatchers.Main) {
                    callback.call(true.toLuaValue(), path.toLuaValue(), 100.toLuaValue())
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    callback.call(false.toLuaValue(), path.toLuaValue(), 0.toLuaValue())
                }
            }
        }
    }

    fun copyFromSdcard(path: String): Boolean {
        val out = bufferedOutputStream ?: return false
        FileInputStream(path).use { inputStream ->
            out.use { outputStream ->
                inputStream.copyTo(outputStream)
            }
        }
        return true
    }

    fun lists(): Array<UFile> {
        val list = file.listFiles()
        return list.map { UFile(it, fs) }.toTypedArray()
    }

    fun readAll(): String {
        val buffer = ByteArray(fs.chunkSize)
        bufferedInputStream?.apply {
            read(buffer)
            close()
        }
        return String(buffer)
    }

    fun writeAll(content: String) =
        bufferedOutputStream?.apply {
            write(content.toByteArray())
            close()
        }.let { file }

    val bufferedInputStream: BufferedInputStream?
            by lazy {
                if (!file.isDirectory) UsbFileStreamFactory.createBufferedInputStream(file, fs)
                else null
            }
    val bufferedOutputStream: BufferedOutputStream?
            by lazy {
                if (!file.isDirectory) UsbFileStreamFactory.createBufferedOutputStream(file, fs)
                else null
            }
}

class UsbUtil(val context: Context) {
    private var usbReceiver: UsbReceiver? = null
    private val ACTION_USB_PERMISSION = "${context.packageName}.USB_PERMISSION"
    private val usbManager = context.getSystemService(Context.USB_SERVICE) as UsbManager
    private val devices: Array<UsbMassStorageDevice> get() = getMassStorageDevices(context)
    private var serverService: UsbFileHttpServerService? = null
    val serviceIntent = Intent(context, UsbFileHttpServerService::class.java)

    private var serviceConnection: ServiceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName, service: IBinder) {
            val binder = service as UsbFileHttpServerService.ServiceBinder
            serverService = binder.service
        }

        override fun onServiceDisconnected(name: ComponentName) {
            serverService = null
        }
    }

    fun bindService() {
        context.startService(serviceIntent)
        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)
    }

    fun unbindService() {
        context.stopService(serviceIntent)
        context.unbindService(serviceConnection)
    }

    fun stopServer() {
        serverService?.stopServer()
    }

    fun startServer(file: UFile) {
        serverService?.startServer(file, NanoHttpdServer(8000))
    }

    fun clearCache() {
        context.cacheDir.deleteRecursively()
    }

    fun getFileTempPath(file: UFile, callback: LuaFunction) {
        val path = context.cacheDir.path + "/" + file.name
        GlobalScope.launch(Dispatchers.IO) {
            file.copyToSdcard(path)
            withContext(Dispatchers.Main) {
                callback.call(path)
            }
        }
    }

    fun register(callback: Callback) {
        usbReceiver = UsbReceiver(callback)
        val filter = IntentFilter()
        filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED)
        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED)
        context.registerReceiver(usbReceiver, filter)
    }

    fun unregister() = usbReceiver?.let {
        context.unregisterReceiver(it)
    }

    fun getFileTempPath(file: UFile): String {
        val path = context.cacheDir.path + "/" + file.name
        file.copyToSdcard(path)
        return path
    }

    fun getDiskNames(): Array<String?> {
        return devices.map { it.usbDevice.deviceName }.toTypedArray()
    }

    fun getDiskCount(): Int {
        return devices.size
    }

    fun getDiskAt(index: Int): UDisk {
        return UDisk(devices[index - 1])
    }

    fun requestAllDisk() {
        for (device in devices) {
            request(device)
        }
    }

    private fun request(device: UsbMassStorageDevice) {
        val permissionIntent = PendingIntent.getBroadcast(
            context,
            0,
            Intent(ACTION_USB_PERMISSION),
            PendingIntent.FLAG_IMMUTABLE
        )
        usbManager.requestPermission(device.usbDevice, permissionIntent)
    }

    inner class UsbReceiver(private val callback: Callback) : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            val action = intent.action
            when (action) {
                UsbManager.ACTION_USB_DEVICE_ATTACHED -> {
                    // 处理设备插入事件
                    val device = intent.getParcelableExtra<UsbDevice>(UsbManager.EXTRA_DEVICE)
                    device?.let {
                        callback.onDeviceAttached(UDisk(it.getMassStorageDevices(context)[0]))
                    }
                }

                UsbManager.ACTION_USB_DEVICE_DETACHED -> {
                    // 处理设备拔出事件
                    val device = intent.getParcelableExtra<UsbDevice>(UsbManager.EXTRA_DEVICE)
                    device?.let {
                        callback.onDeviceDetached(UDisk(it.getMassStorageDevices(context)[0]))
                    }
                }
            }
        }

    }

    interface Callback {
        fun onDeviceAttached(device: UDisk)
        fun onDeviceDetached(device: UDisk)
    }

    inner class UDisk(private val device: UsbMassStorageDevice) {
        fun getName(): String {
            return device.usbDevice.deviceName
        }

        fun request() {
            request(this.device)
        }

        fun init() {
            device.init()
        }

        fun close() {
            device.close()
        }

        fun getPartFile(index: Int): UFile {
            val fs = device.partitions[index - 1].fileSystem
            return UFile(fs.rootDirectory, fs)
        }
    }
}