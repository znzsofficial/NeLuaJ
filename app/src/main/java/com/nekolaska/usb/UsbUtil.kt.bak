package com.nekolaska.usb

import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.hardware.usb.UsbManager
import me.jahnen.libaums.core.UsbMassStorageDevice
import me.jahnen.libaums.core.fs.FileSystem
import me.jahnen.libaums.core.fs.UsbFile
import me.jahnen.libaums.core.fs.UsbFileStreamFactory
import java.io.BufferedInputStream
import java.io.BufferedOutputStream
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.OutputStream


class UFile(val file: UsbFile, val fs: FileSystem) : UsbFile by file {
    override val parent: UFile?
        get() {
            val parent = file.parent
            return if (parent == null) null
            else UFile(parent, fs)
        }

    fun moveTo(destination: UFile) {
        file.moveTo(destination.file)
    }

    override fun createFile(name: String): UFile {
        return UFile(file.createFile(name), fs)
    }

    fun createDir(name: String): UFile {
        return UFile(file.createDirectory(name), fs)
    }

    override fun toString(): String {
        return "UFile: $file"
    }

    override fun search(path: String): UFile? {
        val result = file.search(path)
        return if (result != null) UFile(result, fs)
        else null
    }

    fun getOrCreateDir(path: String): UFile {
        return search(path) ?: createDir(path)
    }

    fun getOrCreateFile(path: String): UFile {
        return search(path) ?: createFile(path)
    }

    fun exists(): Boolean {
        if (parent == null) return true
        return parent!!.search(name) != null
    }

    fun getPath(): String {
        return file.absolutePath
    }

    fun copyToSdcard(path: String): File {
        val outFile = File(path)
        val `in` = bufferedInputStream ?: return outFile
        val out: OutputStream = FileOutputStream(outFile)
        val buffer = ByteArray(1024)
        var length: Int
        while ((`in`.read(buffer).also { length = it }) > 0) {
            out.write(buffer, 0, length)
        }
        out.flush()
        out.close()
        `in`.close()
        return outFile
    }

    fun copyFromSdcard(path: String): UFile {
        val inFile = File(path)
        if (!inFile.exists()) return this
        if (!this.exists()) this.parent?.createFile(name)
        val `in` = FileInputStream(inFile)
        val out = bufferedOutputStream ?: return this
        val buffer = ByteArray(1024)
        var length: Int
        while ((`in`.read(buffer).also { length = it }) > 0) {
            out.write(buffer, 0, length)
        }
        out.flush()
        out.close()
        `in`.close()
        return this
    }

    fun lists(): Array<UFile> {
        val list = file.listFiles()
        return list.map { UFile(it, fs) }.toTypedArray()
    }

    fun readAll(): String {
        val buffer = ByteArray(fs.chunkSize)
        bufferedInputStream?.apply {
            read(buffer)
            close()
        }
        return String(buffer)
    }

    fun writeAll(content: String) =
        bufferedOutputStream?.apply {
            write(content.toByteArray())
            close()
        }.let { file }


    private val bufferedInputStream: BufferedInputStream?
        get() {
            return if (!file.isDirectory) UsbFileStreamFactory.createBufferedInputStream(file, fs)
            else null
        }
    private val bufferedOutputStream: BufferedOutputStream?
        get() {
            return if (!file.isDirectory) UsbFileStreamFactory.createBufferedOutputStream(file, fs)
            else null
        }
}

class UsbUtil(val context: Context) {
    private val ACTION_USB_PERMISSION = "${context.packageName}.USB_PERMISSION"
    private val usbManager = context.getSystemService(Context.USB_SERVICE) as UsbManager
    private val devices: Array<UsbMassStorageDevice>
        get() = UsbMassStorageDevice.getMassStorageDevices(context)

    inner class UDisk(private val device: UsbMassStorageDevice) {
        fun request() {
            request(this.device)
        }

        fun init() {
            device.init()
        }

        fun close() {
            device.close()
        }

        fun getPartFile(index: Int): UFile {
            val fs = device.partitions[index - 1].fileSystem
            return UFile(fs.rootDirectory, fs)
        }

    }

    fun getDiskNames(): Array<String?> {
        return devices.map { it.usbDevice.deviceName }.toTypedArray()
    }

    fun getDiskCount(): Int {
        return devices.size
    }

    fun getDiskAt(index: Int): UDisk {
        return UDisk(devices[index - 1])
    }

    fun requestAllDisk() {
        for (device in devices) {
            request(device)
        }
    }

    private fun request(device: UsbMassStorageDevice) {
        val permissionIntent = PendingIntent.getBroadcast(
            context,
            0,
            Intent(ACTION_USB_PERMISSION),
            PendingIntent.FLAG_IMMUTABLE
        )
        usbManager.requestPermission(device.usbDevice, permissionIntent)
    }
}